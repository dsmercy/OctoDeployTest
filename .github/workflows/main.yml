
name: Docker Build and Deploy

on:
  push:
    branches:
      - master
      - 'feature/**'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up DotNET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Install dependencies 
      run: dotnet restore ./OctoDeployTest/OctoDeployTest.csproj
    - name: Run test cases
      run: dotnet test ./OctoDeployTest/OctoDeployTest.csproj --configuration Release --no-restore  --verbosity normal    

  dockerize:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_SAMPLES_USERNAME }}
        password: ${{ secrets.DOCKERHUB_SAMPLES_PASSWORD }}

    - name: Build and push feature image
      if: startsWith(github.ref, 'refs/heads/feature/')
      uses: docker/build-push-action@v2
      with:
        context: OctoDeploy
        push: true
        tags: dsmercy/octodeploy:feature-${{ steps.determine_version.outputs.semVer }}
        
    - name: Build and push master image
      if: github.ref == 'refs/heads/master'
      uses: docker/build-push-action@v2
      with:
        context: OctoDeploy
        push: true
        tags: dsmercy/octodeploy:${{ steps.determine_version.outputs.semVer }}

  octopus-deploy:
    needs: dockerize
    runs-on: ubuntu-latest
    
    steps:
    - name: Install Octopus Deploy CLI
      uses: OctopusDeploy/install-octopus-cli-action@v1
      with:
        version: latest

    - name: Create Octopus Release for feature branch
      if: startsWith(github.ref, 'refs/heads/feature/')
      uses: OctopusDeploy/create-release-action@v1.1.1
      with:
        api_key: ${{ secrets.OCTOPUS_API_TOKEN }}
        project: Random Quotes
        server: ${{ secrets.OCTOPUS_SERVER_URL }}
        deploy_to: Dev
        packages: Deploy container to Kubernetes:randomquotes:feature-${{ steps.determine_version.outputs.semVer }}
      
    - name: Create Octopus Release for master branch
      if: github.ref == 'refs/heads/master'
      uses: OctopusDeploy/create-release-action@v1.1.1
      with:
        api_key: ${{ secrets.OCTOPUS_API_TOKEN }}
        project: Random Quotes
        server: ${{ secrets.OCTOPUS_SERVER_URL }}
        deploy_to: QA
        packages: Deploy container to Kubernetes:randomquotes:${{ steps.determine_version.outputs.semVer }}
